.container > div {
  justify-content: center;
  align-items: center;
  font-size: 2em;
  color: #ffeead;
}

html,
body {
  box-sizing: border-box;
  background-color: #ffeead;
  height: 100%;
  padding: 10px;
  margin: 0px;
  overflow: hidden;
}

.container > div:nth-child(1n) {
  background-color: #96ceb4;
}

.container > div:nth-child(3n) {
  background-color: #88d8b0;
}

.container > div:nth-child(2n) {
  background-color: #ff6f69;
}

.container > div:nth-child(4n) {
  background-color: #ffcc5c;
}

.container {
  display: grid;
  grid-template: 50px 200px 50px / repeat(2, 1fr); /* first defines no. of rows and their height, then columns and their width. shorthand for:
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: 50px 50px; */
  grid-gap: 3px;
}

div {
  padding: 2px;
  text-align: center;
}

/* .one {
  grid-column-start: 1;
  grid-column-end: 3; /* these two properties define how many columns a row should take up. In this case, the one row will take up 3 columns i.e. the whole grid width for this row
grid-column: 2 / 3; /* shorthand for using the two properties above
}

.two {
  grid-row: 1 /3; /* as above, but for rows; sets which row a grid item starts and ends at 
}

.four {
  grid-column: 1 / -1; /* span to the last column, no matter how many columns there are 
} */

.container {
  height: 100%;
  display: grid;
  grid-gap: 3px;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 40px auto 40px;
  grid-template-areas:
    "m h h h h h h h h h h h"
    "m c c c c c c c c c c c"
    "f f f f f f f f f f f f"; /* template areas are an alternate to the two proerties' above way of defining number of rows and columns*/
}

.header {
  grid-area: h;
}

.menu {
  grid-area: m;
}

.content {
  grid-area: c;
}

.footer {
  grid-area: f;
}
